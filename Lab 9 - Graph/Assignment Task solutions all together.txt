import java.util.Arrays;
public class tester {
  public static void main (String [] args) {
    
    String [] vertex = {"A","B","C","D","E","F","G","H","I","J"};
    
    System.out.println("-----------Task0a-----------\n");
    task.task0a(directed_graph_unweighted.getadjmat(), vertex);
    System.out.println("\n\n");
    
    System.out.println("-----------Task0b-----------\n");
    task.task0b(directed_graph_unweighted.getadjlist(), vertex);
    System.out.println("\n\n");
    
    System.out.println("-----------Task1a-----------\n");
    System.out.println("Graph: ");
    task.task0a(undirected_graph_unweighted.getadjmat(), vertex);
    int check1a = task.task1a(undirected_graph_unweighted.getadjmat());
    if (check1a == 5) {
      System.out.println("Task1a successfully done. Answer = 5");}
    else {
      System.out.println("Task1a failed. Correct Answer = 5. Returned = "+check1a);}
    System.out.println("\n\n");
    
    System.out.println("-----------Task1b-----------\n");
    System.out.println("Graph: ");
    task.task0b(undirected_graph_unweighted.getadjlist(), vertex);
    int check1b = task.task1b(undirected_graph_unweighted.getadjlist());
    if (check1b == 5) {
      System.out.println("Task1b successfully done. Answer = 5");}
    else {
      System.out.println("Task1b failed. Correct Answer = 5. Returned = "+check1b);}
    System.out.println("\n\n");
    
    System.out.println("-----------Task2a-----------\n");
    System.out.println("Graph: ");
    task.task0a(undirected_graph_weighted.getadjmat(), vertex);
    task.task2a(undirected_graph_weighted.getadjmat(), vertex);
    System.out.println("\n\n");
    
    System.out.println("-----------Task2b-----------\n");
    System.out.println("Graph: ");
    task.task0b(undirected_graph_weighted.getadjlist(), vertex);
    task.task2b(undirected_graph_weighted.getadjlist(), vertex);
    System.out.println("\n\n");
    
    System.out.println("-----------Task3a1-----------\n");
    System.out.println("Graph: ");
    task.task0a(directed_graph_weighted.getadjmat(), vertex);
    int check3a1 = task.task3a1(directed_graph_weighted.getadjmat());
    if (check3a1 == 3) {
      System.out.println("Task3a1 successfully done. Answer = 3");}
    else {
      System.out.println("Task3a1 failed. Correct Answer = 3. Returned = "+check3a1);}
    System.out.println("\n\n");
    
    System.out.println("-----------Task3a2-----------\n");
    System.out.println("Graph: ");
    task.task0a(directed_graph_weighted.getadjmat(), vertex);
    task.task3a2(directed_graph_weighted.getadjmat(), vertex);
    System.out.println("\n\n");
    
    System.out.println("-----------Task3b1-----------\n");
    System.out.println("Graph: ");
    task.task0b(directed_graph_weighted.getadjlist(), vertex);
    int check3b1 = task.task3b1(directed_graph_weighted.getadjlist());
    if (check3b1 == 3) {
      System.out.println("Task3b1 successfully done. Answer = 3");}
    else {
      System.out.println("Task3b1 failed. Correct Answer = 3. Returned = "+check3b1);}
    System.out.println("\n\n");
    
    System.out.println("-----------Task3b2-----------\n");
    System.out.println("Graph: ");
    task.task0b(directed_graph_weighted.getadjlist(), vertex);
    task.task3b2(directed_graph_weighted.getadjlist(), vertex);
    System.out.println("\n\n");
    
    System.out.println("-----------Task4a-----------\n");
    System.out.println("Graph: ");
    task.task0a(directed_graph_weighted.getadjmat(), vertex);
    int [] [] a = undirected_graph_weighted.getadjmat();
    int [] [] b = task.task4a(directed_graph_weighted.getadjmat());
    if (Arrays.deepEquals(a, b)) {
      System.out.println("Task4a successfully done.");}
    else {
      System.out.println("Task4a failed.");}
    System.out.println("Returned graph: ");
    task.task0a(b, vertex);
    System.out.println("\n\n");
    
    System.out.println("-----------Task4b-----------\n");
    System.out.println("Graph: ");
    task.task0b(directed_graph_weighted.getadjlist(), vertex);
    edge [] aa = undirected_graph_weighted.getadjlist();
    edge [] bb = task.task4b(directed_graph_weighted.getadjlist());
    System.out.println("\nReturned graph: ");
    task.task0b(bb, vertex);
    System.out.println("\nExpected graph: ");
    task.task0b(aa, vertex);
    System.out.println("\n\n");
  }
}

public class task {
  
  public static void task0a (int [][] adjmat, String [] vertex) {
    System.out.print("   ");
    for (int i = 0; i<adjmat.length; i++) {
      System.out.print(" "+vertex[i]+" ");}
    System.out.println();
    for (int r = 0; r<adjmat.length; r++) {
      System.out.print(" "+vertex[r]+" ");
      for (int c = 0; c<adjmat.length; c++) {
        System.out.print(" "+adjmat[r][c]+" ");}
      System.out.println();}}
  
  public static void task0b (edge [] adjlist, String [] vertex) {
    for (int i = 0; i<adjlist.length; i++) {
      System.out.print(vertex[i]+"-->");
      edge temp = adjlist[i];
      while (temp!=null) {
        System.out.print(vertex[temp.to]+"("+temp.weight+")"+"-->");
        temp = temp.next;}
      System.out.println("null");}}
  
  public static int task1a (int [][] adjmat) {
    int maxdegree = 0;
    for (int r = 0; r<adjmat.length; r++) {
      int count = 0;
      for (int c = 0; c<adjmat.length; c++) {
        if (adjmat[r][c]!=0) {
          count++;}}
      if (count > maxdegree) {
        maxdegree = count;}}
    return maxdegree;}
  
  public static int task1b (edge [] adjlist) {
    int maxdegree = 0;
    for (int i = 0; i<adjlist.length; i++) {
      int count = 0;
      edge temp = adjlist[i];
      while (temp!=null) {
        count++;
        temp = temp.next;}
      if (count > maxdegree) {
        maxdegree = count;}}
    return maxdegree;}
  
  public static void task2a (int [][] adjmat, String [] vertex) {
    int maxweight = 0;
    int maxvertex = -1;
    for (int r = 0; r<adjmat.length; r++) {
      int totalweight = 0;
      for (int c = 0; c<adjmat.length; c++) {
        if (adjmat[r][c]!=0) {
          totalweight += adjmat[r][c];}}
      if (totalweight > maxweight) {
        maxweight = totalweight;
        maxvertex = r;}}
    System.out.println("Vertex whose sum of edge weights is maximum: "+ vertex[maxvertex] +" (Sum: "+maxweight+")");}
  
  public static void task2b (edge [] adjlist, String [] vertex) {
    int maxweight = 0;
    int maxvertex = -1;
    for (int i = 0; i<adjlist.length; i++) {
      int totalweight = 0;
      edge temp = adjlist[i];
      while (temp!=null) {
        totalweight += temp.weight;
        temp = temp.next;}
      if (totalweight > maxweight) {
        maxweight = totalweight;
        maxvertex = i;}}
    System.out.println("Vertex whose sum of edge weights is maximum: "+ vertex[maxvertex] +" (Sum: "+maxweight+")");}
  
  public static int task3a1 (int [][] adjmat) {
    int maxdegree = 0;
    for (int r = 0; r<adjmat.length; r++) {
      int count = 0;
      for (int c = 0; c<adjmat.length; c++) {
        if (adjmat[r][c]!=0) {
          count++;}}
      if (count > maxdegree) {
        maxdegree = count;}}
    return maxdegree;}
  
  public static void task3a2 (int [][] adjmat, String [] vertex) {
    int maxweight = 0;
    int maxvertex = -1;
    for (int r = 0; r<adjmat.length; r++) {
      int totalweight = 0;
      for (int c = 0; c<adjmat.length; c++) {
        if (adjmat[r][c]!=0) {
          totalweight += adjmat[r][c];}}
      if (totalweight > maxweight) {
        maxweight = totalweight;
        maxvertex = r;}}
    System.out.println("Vertex whose sum of edge weights is maximum: "+ vertex[maxvertex] +" (Sum: "+maxweight+")");}
  
  public static int task3b1 (edge [] adjlist) {
    int maxdegree = 0;
    for (int i = 0; i<adjlist.length; i++) {
      int count = 0;
      edge temp = adjlist[i];
      while (temp!=null) {
        count++;
        temp = temp.next;}
      if (count > maxdegree) {
        maxdegree = count;}}
    return maxdegree;}
  
  public static void task3b2 (edge [] adjlist, String [] vertex) {
    int maxweight = 0;
    int maxvertex = -1;
    for (int i = 0; i<adjlist.length; i++) {
      int totalweight = 0;
      edge temp = adjlist[i];
      while (temp!=null) {
        totalweight += temp.weight;
        temp = temp.next;}
      if (totalweight > maxweight) {
        maxweight = totalweight;
        maxvertex = i;}}
    System.out.println("Vertex whose sum of edge weights is maximum: "+ vertex[maxvertex] +" (Sum: "+maxweight+")");}
  
  public static int[][] task4a (int [][] adjmat) {
    for (int r = 0; r<adjmat.length; r++) {
      for (int c = 0; c<adjmat.length; c++) {
        if (adjmat[r][c]!=0) {
          adjmat[c][r] = adjmat[r][c];}}}
    return adjmat;}
  
  public static edge[] task4b (edge [] adjlist) {
    for (int i = adjlist.length-1; i>=0; i--) {
      edge temp = adjlist[i];
      while (temp!=null) {
        if (adjlist[temp.to]==null) {
          adjlist[temp.to] = new edge (i);
          adjlist[temp.to].weight = temp.weight;}
        else {
          edge temp2 = adjlist[temp.to];
          while (temp2.next!=null) {
            temp2 = temp2.next;}
          temp2.next = new edge (i);
          temp2.next.weight = temp.weight;}
        temp = temp.next;}}
    return adjlist;}
}

public class edge {
  public int to;
  public int weight = 1;
  public edge next;
  
  public edge (int to) {
    this.to = to;
    this.next = null;}
}

public class directed_graph_unweighted {
  
  public static int[][] getadjmat () {
    int [][] adjmat = new int [10][10];
    
    adjmat[0][1] = 1;
    adjmat[0][2] = 1;
    
    adjmat[1][2] = 1;
    adjmat[1][3] = 1;
    
    adjmat[2][3] = 1;
    adjmat[2][4] = 1;
    
    adjmat[3][4] = 1;
    adjmat[3][5] = 1;
    
    adjmat[4][5] = 1;
    adjmat[4][6] = 1;
    
    adjmat[5][6] = 1;
    adjmat[5][7] = 1;
    
    adjmat[6][7] = 1;
    adjmat[6][8] = 1;
    adjmat[6][9] = 1;
    
    adjmat[7][8] = 1;
    adjmat[7][9] = 1;
    
    return adjmat;}
  
  public static edge[] getadjlist () {
    
    int [][] adjmat = directed_graph_unweighted.getadjmat();
    edge [] adjlist = new edge [10];
    
    for (int r = 0; r<10; r++) {
      for (int c = 0; c<10; c++) {
        if (adjmat[r][c]!=0) {
          if (adjlist[r]==null) {
            adjlist[r] = new edge (c);}
          else {
            edge temp = adjlist[r];
            while (temp.next!=null) {
              temp = temp.next;}
            temp.next = new edge (c);}}}}
    
    return adjlist;}
}

public class directed_graph_weighted {
  
  public static int[][] getadjmat () {
    int [][] adjmat = new int [10][10];
    
    adjmat[0][1] = 1;
    adjmat[0][2] = 2;
    
    adjmat[1][2] = 3;
    adjmat[1][3] = 4;
    
    adjmat[2][3] = 5;
    adjmat[2][4] = 6;
    
    adjmat[3][4] = 7;
    adjmat[3][5] = 8;
    
    adjmat[4][5] = 9;
    adjmat[4][6] = 1;
    
    adjmat[5][6] = 2;
    adjmat[5][7] = 3;
    
    adjmat[6][7] = 4;
    adjmat[6][8] = 5;
    adjmat[6][9] = 6;
    
    adjmat[7][8] = 7;
    adjmat[7][9] = 8;
    
    return adjmat;}
  
  public static edge[] getadjlist () {
    
    int [][] adjmat = directed_graph_weighted.getadjmat();
    edge [] adjlist = new edge [10];
    
    for (int r = 0; r<10; r++) {
      for (int c = 0; c<10; c++) {
        if (adjmat[r][c]!=0) {
          if (adjlist[r]==null) {
            adjlist[r] = new edge (c);
            adjlist[r].weight = adjmat[r][c];}
          else {
            edge temp = adjlist[r];
            while (temp.next!=null) {
              temp = temp.next;}
            temp.next = new edge (c);
            temp.next.weight = adjmat[r][c];}}}}
    
    return adjlist;}
}

public class undirected_graph_unweighted {
  
  public static int[][] getadjmat () {
    int [][] adjmat = directed_graph_unweighted.getadjmat();
    for (int r = 0; r<10; r++) {
      for (int c = 0; c<10; c++) {
        if (adjmat[r][c]!=0) {
          adjmat[c][r] = adjmat[r][c];}}}
    return adjmat;}
  
  public static edge[] getadjlist () {
    
    int [][] adjmat = undirected_graph_unweighted.getadjmat();
    edge [] adjlist = new edge [10];
    
    for (int r = 0; r<10; r++) {
      for (int c = 0; c<10; c++) {
        if (adjmat[r][c]!=0) {
          if (adjlist[r]==null) {
            adjlist[r] = new edge (c);}
          else {
            edge temp = adjlist[r];
            while (temp.next!=null) {
              temp = temp.next;}
            temp.next = new edge (c);}}}}
    
    return adjlist;}
}
public class undirected_graph_weighted {
  
  public static int[][] getadjmat () {
    int [][] adjmat = new int [10][10];
    
    adjmat[0][1] = 1;
    adjmat[0][2] = 2;
    
    adjmat[1][2] = 3;
    adjmat[1][3] = 4;
    
    adjmat[2][3] = 5;
    adjmat[2][4] = 6;
    
    adjmat[3][4] = 7;
    adjmat[3][5] = 8;
    
    adjmat[4][5] = 9;
    adjmat[4][6] = 1;
    
    adjmat[5][6] = 2;
    adjmat[5][7] = 3;
    
    adjmat[6][7] = 4;
    adjmat[6][8] = 5;
    adjmat[6][9] = 6;
    
    adjmat[7][8] = 7;
    adjmat[7][9] = 8;
    
    for (int r = 0; r<10; r++) {
      for (int c = 0; c<10; c++) {
        if (adjmat[r][c]!=0) {
          adjmat[c][r] = adjmat[r][c];}}}
    
    return adjmat;}
  
  public static edge[] getadjlist () {
    
    int [][] adjmat = undirected_graph_weighted.getadjmat();
    edge [] adjlist = new edge [10];
    
    for (int r = 0; r<10; r++) {
      for (int c = 0; c<10; c++) {
        if (adjmat[r][c]!=0) {
          if (adjlist[r]==null) {
            adjlist[r] = new edge (c);
            adjlist[r].weight = adjmat[r][c];}
          else {
            edge temp = adjlist[r];
            while (temp.next!=null) {
              temp = temp.next;}
            temp.next = new edge (c);
            temp.next.weight = adjmat[r][c];}}}}
    
    return adjlist;}
}