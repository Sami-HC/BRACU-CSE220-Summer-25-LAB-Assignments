//
//
//
//
//
//----------------------LAB-07---Task-04------------------------------
public static Integer rangeSum( BSTNode root, Integer low, Integer high ){
      if (root!=null) {
        if (root.elem>=low && root.elem<=high) {
          return root.elem+rangeSum(root.right, low, high)+rangeSum(root.left, low, high);}
        else {
          return rangeSum(root.right, low, high)+rangeSum(root.left, low, high);}}
      else {
        return 0;}
    }
//
//
//
//
//
//----------------------LAB-07---Task-05------------------------------
public static Integer mirrorSum( BSTNode root ){
      if (root.left==null || root.right==null) {
        return 0;}
      else {
        return sumsubtree(root.left, root.right);}
    }
    public static Integer sumsubtree( BSTNode root1, BSTNode root2 ){
      if (root1!=null && root2!=null) {
        return root1.elem+root2.elem+sumsubtree(root1.left, root2.right)+sumsubtree(root1.right, root2.left);}
      else {
        return 0;}
    }
//
//
//
//
//
//----------------------LAB-07---Task-06------------------------------
public static Boolean isBST( BSTNode root ){
        int count = counttree(root);
        int check = checkBST(root);
        if (count==check){
          return true;}
        else {
          return false;}
    }
    public static int counttree( BSTNode root ){
      if (root!=null) {
        return 1+counttree(root.left)+counttree(root.right);}
      else {
        return 0;}
    }
    public static int checkBST( BSTNode root ){
      if (root!=null) {
        if (root.right!=null && root.elem>=root.right.elem) {
          return 0;}
        else if (root.left!=null && root.elem<=root.left.elem) {
          return 0;}
        else {
          return 1+checkBST(root.right)+checkBST(root.left);}}
      else {
        return 0;}
    }
